### Colors Variables ###
ESC=$(printf '\033')
RESET="${ESC}[0m"
BLACK="${ESC}[30m"
RED="${ESC}[31m"
GREEN="${ESC}[32m"
YELLOW="${ESC}[33m"
BLUE="${ESC}[34m"
MAGENTA="${ESC}[35m"
CYAN="${ESC}[36m"
WHITE="${ESC}[37m"
DEFAULT="${ESC}[39m"

### Start ###
start()
{
  title
  sudo --validate
}

### Init ###
documents()
{
    if [ ! -d ~/Documents/Istantanee ]
    then
        info "Creo Cartella Istantanee"
        mkdir ~/Documents/Istantanee
    fi
    if [ ! -d ~/Documents/Privata ]
    then
        info "Creo Cartella Privata"
        mkdir ~/Documents/Privata
    fi
    if [ ! -d ~/Documents/Privata/Chiavi\ Ssh ]
    then
        info "Cartella Chiavi Ssh in Cartella Privata..."
        mkdir ~/Documents/Privata/Chiavi\ Ssh
    fi
    if [ ! -d ~/Documents/Privata/Configurazioni ]
    then
        info "Cartella Configurazioni in Cartella Privata..."
        mkdir ~/Documents/Privata/Configurazioni
    fi
    info "Cartella Documenti impostata..."
}

initssh()
{
    if [ ! -d ~/.ssh ]
    then
        info "Creo Cartella Ssh..."
        mkdir ~/.ssh
        mkdir ~/.ssh/sockets/
        sudo chmod 700 ~/.ssh
    fi
    info "Cartella Ssh impostata..."
}

initsskeys()
{
    if [ ! -f ~/.ssh/id_ed25519 ] && [ ! -f ~/.ssh/id_ed25519.pub ]
    then
        if [ ! -f ~/Documents/Privata/Chiavi\ Ssh/id_ed25519 ] && [ ! -f ~/Documents/Privata/Chiavi\ Ssh/id_ed25519.pub ]
        then
            info "Creo Chiave Ssh Ed25519..."
            ssh-keygen -t ed25519
            mv ~/.ssh/id_ed25519 ~/Documents/Privata/Chiavi\ Ssh/id_ed25519
            mv ~/.ssh/id_ed25519.pub ~/Documents/Privata/Chiavi\ Ssh/id_ed25519.pub
        fi
        ln -s ~/Documents/Privata/Chiavi\ Ssh/id_ed25519 ~/.ssh/id_ed25519
        ln -s ~/Documents/Privata/Chiavi\ Ssh/id_ed25519.pub ~/.ssh/id_ed25519.pub
    fi
    if [ ! -f ~/.ssh/id_rsa ] && [ ! -f ~/.ssh/id_rsa.pub ]
    then
        if [ ! -f ~/Documents/Privata/Chiavi\ Ssh/id_rsa ] && [ ! -f ~/Documents/Privata/Chiavi\ Ssh/id_rsa.pub ]
        then
            info "Creo Chiave Ssh.RSA.."
            ssh-keygen -t rsa -b 4096
            mv ~/.ssh/id_rsa ~/Documents/Privata/Chiavi\ Ssh/id_rsa
            mv ~/.ssh/id_rsa.pub ~/Documents/Privata/Chiavi\ Ssh/id_rsa.pub
        fi
        ln -s ~/Documents/Privata/Chiavi\ Ssh/id_rsa ~/.ssh/id_rsa
        ln -s ~/Documents/Privata/Chiavi\ Ssh/id_rsa.pub ~/.ssh/id_rsa.pub
    fi
}

initxcode() {
  if xcode-select -p > /dev/null; then
    warn "xCode Command Line Tools already installed"
  else
    info "Installing xCode Command Line Tools..."
    xcode-select --install
    sudo xcodebuild -license accept
  fi
}

inithomebrew()
{
if test ! $(which brew); then
    info "Installo homebrew..."
    sudo --validate
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
else
    warn "HomeBrew already installed"
fi

info "Aggiorno elenco pacchetti homebrew..."
brew update

info "Aggiorno pacchetti homebrew installati..."
brew upgrade
}

initdotfiles()
{
    if [ ! -f /opt/homebrew/bin/git ]
    then
      info "Installo Git..."
      brew install git
    else
      warn "Git già installato"
    fi
    if [ ! -f ~/.gitconfig ]
    then
      info "Copia .gitconfig di default"
      cp ~/Documents/Privata/dotfiles/gitconfig ~/Documents/Privata/Configurazioni/gitconfig
      ln -s ~/Documents/Privata/Configurazioni/gitconfig ~/.gitconfig
      echo -n "Inserire nome utente per git: "
      read username
      git config --global user.name $username
      echo -n "Inserire e-mail per git: "
      read email
      git config --global user.email $email
    else
      warn "File .gitconfig già impostato"
    fi

    if [ ! -d $REPO_PATH ]
    then
      info "Clono dotfiles repo da $REPO_URL a $REPO_PATH"
      git clone "$REPO_URL" "$REPO_PATH"
    else
      warn "Cartella dotfiles già impostata"
    fi

    if [ ! -f ~/.nanorc ]
    then
      info "Copia .nanorc di default"
      cp ~/Documents/Privata/dotfiles/nanorc ~/Documents/Privata/Configurazioni/nanorc
      ln -s ~/Documents/Privata/Configurazioni/nanorc ~/.nanorc
    else
      warn "File .nanorc già impostato"
    fi

    if [ ! -f ~/.zprofile ]
    then
      info "Copia .zshprofile di default"
      cp ~/Documents/Privata/dotfiles/zshprofile ~/Documents/Privata/Configurazioni/zshprofile
      ln -s ~/Documents/Privata/Configurazioni/zshprofile ~/.zshprofile
    else
      warn "File .zshprofile già impostato"
    fi
}

apply_brew_taps() {
  local tap_packages=$*
  for tap in $tap_packages; do
    if brew tap | grep "$tap" > /dev/null; then
      warn "Tap $tap is already applied"
    else
      brew tap "$tap"
    fi
  done
}

install_brew_formulas() {
  local formulas=$*
  for formula in $formulas; do
    if brew list --formula | grep "$formula" > /dev/null; then
      warn "Formula $formula is already installed"
    else
      info "Installing package < $formula >"
      brew install "$formula"
    fi
  done
}

install_brew_casks() {
  local casks=$*
  for cask in $casks; do
    if brew list --casks | grep "$cask" > /dev/null; then
      warn "Cask $cask is already installed"
    else
      info "Installing cask < $cask >"
      brew install --cask "$cask"
    fi
  done
}

###
install_packages() {
  info "Configuring taps"
  apply_brew_taps "${TAPS[@]}"

  info "Installing packages..."
  install_brew_formulas "${PACKAGES[@]}"

  info "Installing base casks..."
  install_brew_casks "${CASKS[@]}"

  info "Cleaning up brew packages..."
  brew cleanup
}

### Fonts
install_fonts() {
  info "Installing fonts..."
  brew tap homebrew/cask-fonts
  install_brew_casks "${FONTS[@]}"
  info "Installing fonts from folder..."
  cp -a ./fonts/* ~/Library/Fonts
}

### zsh

install_oh_my_zsh() {
  info "Imposto ZSH come default shell..."
  sudo chsh -s $(which zsh)

  if [ ! -f ~/.zshrc ]
  then
    info "Installo oh my zsh..."
    ZSH=~/.oh-my-zsh ZSH_DISABLE_COMPFIX=true sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

    chmod 744 ~/.oh-my-zsh/oh-my-zsh.sh
  else
    warn "oh-my-zsh is already installed"
  fi

  if [ ! -d ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions ]
  then
    info "Installo zsh-autosuggestions..."
    git clone --depth=1 https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
  else
    warn "zsh-autosuggestions is already installed"
  fi

  if [ ! -d ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting ]
  then
    info "Installo zsh-syntax-highlighting..."
    git clone --depth=1 https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
  else
    warn "zsh-syntax-highlighting is already installed"
  fi

  if [ ! -d ~/.oh-my-zsh/custom/plugins/zsh-completions ]
  then
    info "Installo zsh-completions..."
    git clone --depth=1 https://github.com/zsh-users/zsh-completions ~/.oh-my-zsh/custom/plugins/zsh-completions
  else
    warn "zsh-completions is already installed"
  fi

  if [ ! -d ~/.oh-my-zsh/custom/themes/powerlevel10k ]
  then
    info "Installo powerlevel10k..."
    git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/.oh-my-zsh/custom/themes/powerlevel10k
  else
    warn "powerlevel10k is already installed"
  fi
}


install_apps() {
  info "List MacOS apps to update..."
  mas outdated
  info "Upgrade MacOS apps to update..."
  mas upgrade
  info "Installing MacOS apps..."
  install_macos_apps "${MACOSAPPS[@]}"
}

install_macos_apps()
{
  local apps=$*
  for app in $apps; do
    if mas list | grep "$app" > /dev/null; then
      warn "$app - $(mas info $app | head -n 1) is already installed"
    else
      info "Installing package < $app - $(mas info $app | head -n 1) >"
      mas install $app
    fi
  done
}